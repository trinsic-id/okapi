# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: pbmse/v1/pbmse.proto
# typed: strict

class Pbmse::V1::SignedMessage
  include ::Google::Protobuf
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Pbmse::V1::SignedMessage) }
  def self.decode(str)
  end

  sig { params(msg: Pbmse::V1::SignedMessage).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Pbmse::V1::SignedMessage) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Pbmse::V1::SignedMessage, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      payload: T.nilable(String),
      signatures: T.nilable(T::Array[T.nilable(Pbmse::V1::Signature)])
    ).void
  end
  def initialize(
    payload: "",
    signatures: []
  )
  end

  sig { returns(String) }
  def payload
  end

  sig { params(value: String).void }
  def payload=(value)
  end

  sig { void }
  def clear_payload
  end

  sig { returns(T::Array[T.nilable(Pbmse::V1::Signature)]) }
  def signatures
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def signatures=(value)
  end

  sig { void }
  def clear_signatures
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Pbmse::V1::Signature
  include ::Google::Protobuf
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Pbmse::V1::Signature) }
  def self.decode(str)
  end

  sig { params(msg: Pbmse::V1::Signature).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Pbmse::V1::Signature) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Pbmse::V1::Signature, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      header: T.nilable(String),
      signature: T.nilable(String)
    ).void
  end
  def initialize(
    header: "",
    signature: ""
  )
  end

  sig { returns(String) }
  def header
  end

  sig { params(value: String).void }
  def header=(value)
  end

  sig { void }
  def clear_header
  end

  sig { returns(String) }
  def signature
  end

  sig { params(value: String).void }
  def signature=(value)
  end

  sig { void }
  def clear_signature
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Pbmse::V1::SignatureHeader
  include ::Google::Protobuf
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Pbmse::V1::SignatureHeader) }
  def self.decode(str)
  end

  sig { params(msg: Pbmse::V1::SignatureHeader).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Pbmse::V1::SignatureHeader) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Pbmse::V1::SignatureHeader, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      algorithm: T.nilable(String),
      key_id: T.nilable(String)
    ).void
  end
  def initialize(
    algorithm: "",
    key_id: ""
  )
  end

  sig { returns(String) }
  def algorithm
  end

  sig { params(value: String).void }
  def algorithm=(value)
  end

  sig { void }
  def clear_algorithm
  end

  sig { returns(String) }
  def key_id
  end

  sig { params(value: String).void }
  def key_id=(value)
  end

  sig { void }
  def clear_key_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Pbmse::V1::EncryptedMessage
  include ::Google::Protobuf
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Pbmse::V1::EncryptedMessage) }
  def self.decode(str)
  end

  sig { params(msg: Pbmse::V1::EncryptedMessage).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Pbmse::V1::EncryptedMessage) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Pbmse::V1::EncryptedMessage, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      iv: T.nilable(String),
      aad: T.nilable(String),
      ciphertext: T.nilable(String),
      tag: T.nilable(String),
      recipients: T.nilable(T::Array[T.nilable(Pbmse::V1::EncryptionRecipient)])
    ).void
  end
  def initialize(
    iv: "",
    aad: "",
    ciphertext: "",
    tag: "",
    recipients: []
  )
  end

  sig { returns(String) }
  def iv
  end

  sig { params(value: String).void }
  def iv=(value)
  end

  sig { void }
  def clear_iv
  end

  sig { returns(String) }
  def aad
  end

  sig { params(value: String).void }
  def aad=(value)
  end

  sig { void }
  def clear_aad
  end

  sig { returns(String) }
  def ciphertext
  end

  sig { params(value: String).void }
  def ciphertext=(value)
  end

  sig { void }
  def clear_ciphertext
  end

  sig { returns(String) }
  def tag
  end

  sig { params(value: String).void }
  def tag=(value)
  end

  sig { void }
  def clear_tag
  end

  sig { returns(T::Array[T.nilable(Pbmse::V1::EncryptionRecipient)]) }
  def recipients
  end

  sig { params(value: ::Google::Protobuf::RepeatedField).void }
  def recipients=(value)
  end

  sig { void }
  def clear_recipients
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Pbmse::V1::EncryptionHeader
  include ::Google::Protobuf
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Pbmse::V1::EncryptionHeader) }
  def self.decode(str)
  end

  sig { params(msg: Pbmse::V1::EncryptionHeader).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Pbmse::V1::EncryptionHeader) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Pbmse::V1::EncryptionHeader, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      mode: T.nilable(T.any(Symbol, String, Integer)),
      algorithm: T.nilable(T.any(Symbol, String, Integer)),
      key_id: T.nilable(String),
      sender_key_id: T.nilable(String)
    ).void
  end
  def initialize(
    mode: :ENCRYPTION_MODE_UNSPECIFIED,
    algorithm: :ENCRYPTION_ALGORITHM_UNSPECIFIED,
    key_id: "",
    sender_key_id: ""
  )
  end

  sig { returns(Symbol) }
  def mode
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def mode=(value)
  end

  sig { void }
  def clear_mode
  end

  sig { returns(Symbol) }
  def algorithm
  end

  sig { params(value: T.any(Symbol, String, Integer)).void }
  def algorithm=(value)
  end

  sig { void }
  def clear_algorithm
  end

  sig { returns(String) }
  def key_id
  end

  sig { params(value: String).void }
  def key_id=(value)
  end

  sig { void }
  def clear_key_id
  end

  sig { returns(String) }
  def sender_key_id
  end

  sig { params(value: String).void }
  def sender_key_id=(value)
  end

  sig { void }
  def clear_sender_key_id
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Pbmse::V1::EncryptionRecipient
  include ::Google::Protobuf
  include ::Google::Protobuf::MessageExts
  extend ::Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Pbmse::V1::EncryptionRecipient) }
  def self.decode(str)
  end

  sig { params(msg: Pbmse::V1::EncryptionRecipient).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Pbmse::V1::EncryptionRecipient) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Pbmse::V1::EncryptionRecipient, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(::Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      header: T.nilable(Pbmse::V1::EncryptionHeader),
      content_encryption_key: T.nilable(String)
    ).void
  end
  def initialize(
    header: nil,
    content_encryption_key: ""
  )
  end

  sig { returns(T.nilable(Pbmse::V1::EncryptionHeader)) }
  def header
  end

  sig { params(value: T.nilable(Pbmse::V1::EncryptionHeader)).void }
  def header=(value)
  end

  sig { void }
  def clear_header
  end

  sig { returns(String) }
  def content_encryption_key
  end

  sig { params(value: String).void }
  def content_encryption_key=(value)
  end

  sig { void }
  def clear_content_encryption_key
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

module Pbmse::V1::EncryptionMode
  self::ENCRYPTION_MODE_UNSPECIFIED = T.let(0, Integer)
  self::ENCRYPTION_MODE_DIRECT = T.let(1, Integer)
  self::ENCRYPTION_MODE_CONTENT_ENCRYPTION_KEY = T.let(2, Integer)

  sig { params(value: Integer).returns(T.nilable(Symbol)) }
  def self.lookup(value)
  end

  sig { params(value: Symbol).returns(T.nilable(Integer)) }
  def self.resolve(value)
  end

  sig { returns(::Google::Protobuf::EnumDescriptor) }
  def self.descriptor
  end
end

module Pbmse::V1::EncryptionAlgorithm
  self::ENCRYPTION_ALGORITHM_UNSPECIFIED = T.let(0, Integer)
  self::ENCRYPTION_ALGORITHM_XCHACHA20POLY1305 = T.let(1, Integer)
  self::ENCRYPTION_ALGORITHM_AES_GCM = T.let(2, Integer)

  sig { params(value: Integer).returns(T.nilable(Symbol)) }
  def self.lookup(value)
  end

  sig { params(value: Symbol).returns(T.nilable(Integer)) }
  def self.resolve(value)
  end

  sig { returns(::Google::Protobuf::EnumDescriptor) }
  def self.descriptor
  end
end
