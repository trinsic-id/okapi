# Code generated by protoc-gen-rbi. DO NOT EDIT.
# source: okapi/hashing/v1/hashing.proto
# typed: strict

class Okapi::Hashing::V1::Blake3HashRequest
  include Google::Protobuf
  include Google::Protobuf::MessageExts
  extend Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Okapi::Hashing::V1::Blake3HashRequest) }
  def self.decode(str)
  end

  sig { params(msg: Okapi::Hashing::V1::Blake3HashRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Okapi::Hashing::V1::Blake3HashRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Okapi::Hashing::V1::Blake3HashRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      data: T.nilable(String)
    ).void
  end
  def initialize(
    data: ""
  )
  end

  sig { returns(String) }
  def data
  end

  sig { params(value: String).void }
  def data=(value)
  end

  sig { void }
  def clear_data
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Okapi::Hashing::V1::Blake3HashResponse
  include Google::Protobuf
  include Google::Protobuf::MessageExts
  extend Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Okapi::Hashing::V1::Blake3HashResponse) }
  def self.decode(str)
  end

  sig { params(msg: Okapi::Hashing::V1::Blake3HashResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Okapi::Hashing::V1::Blake3HashResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Okapi::Hashing::V1::Blake3HashResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      digest: T.nilable(String)
    ).void
  end
  def initialize(
    digest: ""
  )
  end

  sig { returns(String) }
  def digest
  end

  sig { params(value: String).void }
  def digest=(value)
  end

  sig { void }
  def clear_digest
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Okapi::Hashing::V1::Blake3KeyedHashRequest
  include Google::Protobuf
  include Google::Protobuf::MessageExts
  extend Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Okapi::Hashing::V1::Blake3KeyedHashRequest) }
  def self.decode(str)
  end

  sig { params(msg: Okapi::Hashing::V1::Blake3KeyedHashRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Okapi::Hashing::V1::Blake3KeyedHashRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Okapi::Hashing::V1::Blake3KeyedHashRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      data: T.nilable(String),
      key: T.nilable(String)
    ).void
  end
  def initialize(
    data: "",
    key: ""
  )
  end

  sig { returns(String) }
  def data
  end

  sig { params(value: String).void }
  def data=(value)
  end

  sig { void }
  def clear_data
  end

  sig { returns(String) }
  def key
  end

  sig { params(value: String).void }
  def key=(value)
  end

  sig { void }
  def clear_key
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Okapi::Hashing::V1::Blake3KeyedHashResponse
  include Google::Protobuf
  include Google::Protobuf::MessageExts
  extend Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Okapi::Hashing::V1::Blake3KeyedHashResponse) }
  def self.decode(str)
  end

  sig { params(msg: Okapi::Hashing::V1::Blake3KeyedHashResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Okapi::Hashing::V1::Blake3KeyedHashResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Okapi::Hashing::V1::Blake3KeyedHashResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      digest: T.nilable(String)
    ).void
  end
  def initialize(
    digest: ""
  )
  end

  sig { returns(String) }
  def digest
  end

  sig { params(value: String).void }
  def digest=(value)
  end

  sig { void }
  def clear_digest
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Okapi::Hashing::V1::Blake3DeriveKeyRequest
  include Google::Protobuf
  include Google::Protobuf::MessageExts
  extend Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Okapi::Hashing::V1::Blake3DeriveKeyRequest) }
  def self.decode(str)
  end

  sig { params(msg: Okapi::Hashing::V1::Blake3DeriveKeyRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Okapi::Hashing::V1::Blake3DeriveKeyRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Okapi::Hashing::V1::Blake3DeriveKeyRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      context: T.nilable(String),
      key_material: T.nilable(String)
    ).void
  end
  def initialize(
    context: "",
    key_material: ""
  )
  end

  sig { returns(String) }
  def context
  end

  sig { params(value: String).void }
  def context=(value)
  end

  sig { void }
  def clear_context
  end

  sig { returns(String) }
  def key_material
  end

  sig { params(value: String).void }
  def key_material=(value)
  end

  sig { void }
  def clear_key_material
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Okapi::Hashing::V1::Blake3DeriveKeyResponse
  include Google::Protobuf
  include Google::Protobuf::MessageExts
  extend Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Okapi::Hashing::V1::Blake3DeriveKeyResponse) }
  def self.decode(str)
  end

  sig { params(msg: Okapi::Hashing::V1::Blake3DeriveKeyResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Okapi::Hashing::V1::Blake3DeriveKeyResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Okapi::Hashing::V1::Blake3DeriveKeyResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      digest: T.nilable(String)
    ).void
  end
  def initialize(
    digest: ""
  )
  end

  sig { returns(String) }
  def digest
  end

  sig { params(value: String).void }
  def digest=(value)
  end

  sig { void }
  def clear_digest
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Okapi::Hashing::V1::SHA256HashRequest
  include Google::Protobuf
  include Google::Protobuf::MessageExts
  extend Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Okapi::Hashing::V1::SHA256HashRequest) }
  def self.decode(str)
  end

  sig { params(msg: Okapi::Hashing::V1::SHA256HashRequest).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Okapi::Hashing::V1::SHA256HashRequest) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Okapi::Hashing::V1::SHA256HashRequest, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      data: T.nilable(String)
    ).void
  end
  def initialize(
    data: ""
  )
  end

  sig { returns(String) }
  def data
  end

  sig { params(value: String).void }
  def data=(value)
  end

  sig { void }
  def clear_data
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end

class Okapi::Hashing::V1::SHA256HashResponse
  include Google::Protobuf
  include Google::Protobuf::MessageExts
  extend Google::Protobuf::MessageExts::ClassMethods

  sig { params(str: String).returns(Okapi::Hashing::V1::SHA256HashResponse) }
  def self.decode(str)
  end

  sig { params(msg: Okapi::Hashing::V1::SHA256HashResponse).returns(String) }
  def self.encode(msg)
  end

  sig { params(str: String, kw: T.untyped).returns(Okapi::Hashing::V1::SHA256HashResponse) }
  def self.decode_json(str, **kw)
  end

  sig { params(msg: Okapi::Hashing::V1::SHA256HashResponse, kw: T.untyped).returns(String) }
  def self.encode_json(msg, **kw)
  end

  sig { returns(Google::Protobuf::Descriptor) }
  def self.descriptor
  end

  sig do
    params(
      digest: T.nilable(String)
    ).void
  end
  def initialize(
    digest: ""
  )
  end

  sig { returns(String) }
  def digest
  end

  sig { params(value: String).void }
  def digest=(value)
  end

  sig { void }
  def clear_digest
  end

  sig { params(field: String).returns(T.untyped) }
  def [](field)
  end

  sig { params(field: String, value: T.untyped).void }
  def []=(field, value)
  end

  sig { returns(T::Hash[Symbol, T.untyped]) }
  def to_h
  end
end
