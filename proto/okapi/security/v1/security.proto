// messages related to the oberon protocol
// See: https://github.com/mikelodder7/oberon
syntax = "proto3";

package okapi.security.v1;

option csharp_namespace = "Okapi.Security.V1";
option go_package = "github.com/trinsic-id/okapiproto";
option java_package = "trinsic.okapi.security.v1";

// Create an Oberon Compatible Secret Key
message CreateOberonKeyRequest {
    bytes seed = 1; // optional seed to generate deterministic keys
}

// Contains the oberon secret key bytes
message CreateOberonKeyResponse {
    bytes sk = 2; // raw secret key bytes
    bytes pk = 3; // raw public key bytes
}

// Create a new oberon token
message CreateOberonTokenRequest {
    bytes sk = 1; // raw BLS key bytes
    bytes data = 2; // data is the public part of the oberon protocol and can be any data
    repeated bytes blinding = 3; // optional blinding for the token
}

// Contains the token with optional blinding 
message CreateOberonTokenResponse {
    bytes token = 1; // raw token bytes
}

// Create a proof that holder knows the token
message CreateOberonProofRequest {
    bytes data = 1; // data used to create the token
    bytes token = 2; // token data
    repeated bytes blinding = 3; // any blindings used to create the token
    bytes nonce = 4; // nonce for generating the proof
}

// Contains the token proof
message CreateOberonProofResponse {
    bytes proof = 2; // raw proof bytes
}

// Verify the presented proof is valid
message VerifyOberonProofRequest {
    bytes proof = 1; // raw proof bytes returned from CreateProof
    bytes data = 2; // data used to create the token
    bytes nonce = 3; // nonce used to generate the proof
    bytes pk = 4; // public key that was used to generate the token
}

// Contains the status of the proof validation
message VerifyOberonProofResponse {
    bool valid = 1; // whether the given proof was valid
}

// Blind an oberon token 
message BlindOberonTokenRequest {
    bytes token = 1; // raw token bytes
    repeated bytes blinding = 2; // blinding to apply to the token
}

// Contains the blinded token reply
message BlindOberonTokenResponse {
    bytes token = 1; // raw blinded token bytes
}

// UnBlind an oberon token 
message UnBlindOberonTokenRequest {
    bytes token = 1; // raw token bytes
    repeated bytes blinding = 2; // blinding to remove from the token
}

// Contains the unblinded token reply
message UnBlindOberonTokenResponse {
    bytes token = 1; // raw unblinded token bytes
}

// Verify that an oberon token comes from the desired issuer
message VerifyOberonTokenRequest {
    bytes token = 1; // raw token bytes
    bytes pk = 2; // token is valid to this public key?
    bytes data = 3; // public part of oberon protocol - can be any data
}

// Contains the verification result for the oberon token
message VerifyOberonTokenResponse {
    bool valid = 1; // token is valid to the public key
}