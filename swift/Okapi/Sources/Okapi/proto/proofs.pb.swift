// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: proofs.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Okapi_Proofs_LdSuite: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case jcsEd25519Signature2020 // = 0
  case UNRECOGNIZED(Int)

  init() {
    self = .jcsEd25519Signature2020
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .jcsEd25519Signature2020
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .jcsEd25519Signature2020: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Okapi_Proofs_LdSuite: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Okapi_Proofs_LdSuite] = [
    .jcsEd25519Signature2020,
  ]
}

#endif  // swift(>=4.2)

struct Okapi_Proofs_CreateProofRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The input JSON document that will be used
  /// to create the LD Proof. This document must
  /// also contain a "proof" object, with the desired
  /// values filled in.
  var document: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _document ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_document = newValue}
  }
  /// Returns true if `document` has been explicitly set.
  var hasDocument: Bool {return self._document != nil}
  /// Clears the value of `document`. Subsequent reads from it will return its default value.
  mutating func clearDocument() {self._document = nil}

  /// The signer of the proof. This field must include
  /// the 'kid' in full URI format.
  /// Example:
  ///  did:example:alice#key-1
  var key: Okapi_Keys_JsonWebKey {
    get {return _key ?? Okapi_Keys_JsonWebKey()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  mutating func clearKey() {self._key = nil}

  /// The LD Suite to use to produce this proof
  var suite: Okapi_Proofs_LdSuite = .jcsEd25519Signature2020

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _document: SwiftProtobuf.Google_Protobuf_Struct? = nil
  fileprivate var _key: Okapi_Keys_JsonWebKey? = nil
}

struct Okapi_Proofs_CreateProofResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var signedDocument: SwiftProtobuf.Google_Protobuf_Struct {
    get {return _signedDocument ?? SwiftProtobuf.Google_Protobuf_Struct()}
    set {_signedDocument = newValue}
  }
  /// Returns true if `signedDocument` has been explicitly set.
  var hasSignedDocument: Bool {return self._signedDocument != nil}
  /// Clears the value of `signedDocument`. Subsequent reads from it will return its default value.
  mutating func clearSignedDocument() {self._signedDocument = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _signedDocument: SwiftProtobuf.Google_Protobuf_Struct? = nil
}

struct Okapi_Proofs_VerifyProofRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Okapi_Proofs_VerifyProofResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "okapi.proofs"

extension Okapi_Proofs_LdSuite: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JcsEd25519Signature2020"),
  ]
}

extension Okapi_Proofs_CreateProofRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateProofRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "document"),
    3: .same(proto: "key"),
    4: .same(proto: "suite"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._document) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._key) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.suite) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._document {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._key {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }
    if self.suite != .jcsEd25519Signature2020 {
      try visitor.visitSingularEnumField(value: self.suite, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Okapi_Proofs_CreateProofRequest, rhs: Okapi_Proofs_CreateProofRequest) -> Bool {
    if lhs._document != rhs._document {return false}
    if lhs._key != rhs._key {return false}
    if lhs.suite != rhs.suite {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Okapi_Proofs_CreateProofResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateProofResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signed_document"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._signedDocument) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._signedDocument {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Okapi_Proofs_CreateProofResponse, rhs: Okapi_Proofs_CreateProofResponse) -> Bool {
    if lhs._signedDocument != rhs._signedDocument {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Okapi_Proofs_VerifyProofRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VerifyProofRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Okapi_Proofs_VerifyProofRequest, rhs: Okapi_Proofs_VerifyProofRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Okapi_Proofs_VerifyProofResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VerifyProofResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Okapi_Proofs_VerifyProofResponse, rhs: Okapi_Proofs_VerifyProofResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
