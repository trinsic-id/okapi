name: Build Golang SDK

on:
  workflow_dispatch:
  pull_request:
    paths:
      - "go/**"
      - "proto/**"
      - ".github/workflows/*golang*"
  push:
    branches:
      - main

jobs:
  test_go:
    name: Test Go code
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            static_lib_file: libokapi.a
            dynamic_lib_file: libokapi.so
            artifact_name: linux
            go-version: '1.16'
          - os: windows-latest
            static_lib_file: libokapi.dll.a
            dynamic_lib_file: okapi.dll
            artifact_name: windows
            go-version: '1.16'
          - os: macos-latest
            static_lib_file: libokapi.a
            dynamic_lib_file: libokapi.dylib
            artifact_name: macos
            go-version: '1.16'
    steps:
      - uses: actions/checkout@v2
      - name: Download workflow artifact
        uses: dawidd6/action-download-artifact@v2.14.0
        with:
          workflow: "build-libs.yml"
          path: ./libs
      - name: Copy include file and libraries
        run: |
          mkdir ./include
          cp ./libs/C_header/okapi.h ./include/okapi.h
          mkdir ./native/target && mkdir ./native/target/release
          cp ./libs/${{ matrix.artifact_name }}/${{ matrix.static_lib_file}} ./native/target/release
          cp ./libs/${{ matrix.artifact_name }}/${{ matrix.dynamic_lib_file}} ./go/okapi
        shell: pwsh
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Display Golang version
        run: go version
      - name: Build, Test
        run: |
          go get github.com/tebeka/go2xunit
          go build
          go test -v ./DidKey ./LdProofs | go2xunit > test_output.xml
        working-directory: ./go/okapi
        shell: pwsh
        env:
          LD_LIBRARY_PATH: "$GITHUB_WORKSPACE/go/okapi"
      - name: Upload test results
        uses: actions/upload-artifact@v2
        with:
          name: golang-test-results
          path: ./go/okapi/test_output.xml

  upload_test_results:
    name: Upload Golang Test Results
    runs-on: ubuntu-latest
    needs: [ test_go ]
    steps:
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.0.10
        with:
          name: golang-test-results
          path: ./go
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1.18
        if: always()
        with:
          files: go/test_output.xml
          comment_mode: "create new"
          hide_comments: "off"
          check_name: "Golang Unit Test Results"
