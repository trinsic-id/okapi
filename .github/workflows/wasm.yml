name: "Web Assembly: Build, Test"

on:
  pull_request:
    branches:
      - main
    paths:
      - "native/**"
      - "proto/**"
      - "wasm/**"
      - ".github/workflows/*wasm*"
      - ".github/workflows/*node*"
      - ".github/workflows/*browser*"
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      packageVersion:
        description: "Package Version"
        required: true
        default: "1.0.0"
  release:
    types: [published, prereleased]

jobs:
  build_test:
    name: Build for Web Assembly
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    defaults:
      run:
        working-directory: ./wasm
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: 'recursive'
          token: ${{ secrets.ACCESS_TOKEN }}
      - uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: 'latest'
      - run: |
          rustup toolchain uninstall stable
          rustup toolchain install stable
          rustup toolchain install stable --target wasm32-unknown-unknown
      - run: npm run start
      - run: npm run build
      - run: npm run test

  publish_npm:
    name: Publish packages to NPM
    if: |
      github.event_name == 'release' &&
      github.event.action == 'published' &&
      github.release.draft == false &&
      github.release.prerelease == false
    runs-on: windows-latest
    needs: [build_test]
    defaults:
      run:
        working-directory: ./wasm
        shell: pwsh
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: 'recursive'
          token: ${{ secrets.ACCESS_TOKEN }}
      - uses: jetli/wasm-pack-action@v0.3.0
        with:
          version: 'latest'
      - run: npm run start
      - run: npm run build
      - name: Generate Package Version
        run: |
          $packageVersion = node -p -e "require('./package.json').version"
          $manualVersion = "${{ github.event.release.tag_name }}"
          $version = if ($manualVersion) { $manualVersion } else { $packageVersion }
          $version = $version.TrimStart("v")

          echo "PACKAGE_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf-8 -Append
        working-directory: ./
      - run: npm set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}
      - run: npx lerna publish $env:PACKAGE_VERSION --no-git-tag-version --yes --no-verify-access
