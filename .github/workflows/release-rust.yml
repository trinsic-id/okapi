name: "Rust (release)"

on:
  workflow_dispatch:
    inputs:
      packageVersion:
        description: 'Version to build'
        required: true
        default: 'v1.0.0'
  workflow_run:
    workflows: ["Release Platform Libraries"]
    branches: ["main", "v?.*"]
    types:
      - completed

jobs:
  homebrew:
    name: Package Source
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - uses: trinsic-id/set-version@v0.1
        id: setversion
        with:
          githubToken: ${{ secrets.API_GITHUB_TOKEN }}
          overrideVersion: ${{ github.event.inputs.packageVersion }}

      - name: Create Archive
        run: |
          cp -r include native
          sed -i 's/version = "0.1.0"/version = "${{ steps.setversion.outputs.packageVersion }}"/g' native/Cargo.toml
          mv native okapi
          tar -czvf okapi-${{ steps.setversion.outputs.packageVersion }}.tar.gz okapi

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: archive
          path: |
            ./*.tar.gz

      - name: Upload to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./okapi-${{ steps.setversion.outputs.packageVersion }}.tar.gz
          asset_name: okapi-${{ steps.setversion.outputs.packageVersion }}.tar.gz
          tag: ${{ steps.setversion.outputs.releaseVersion }}
          overwrite: false
          body: "Okapi Library Source"

  deb:
    name: Debian Package
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     arch: [amd64]
    #     include:
    #       - arch: x86_64
    #         target: x86_64-unknown-linux-gnu
    #         image: macos-latest
    #       - arch: amd64
    #         target: aarch64-unknown-linux-gnu
    #         image: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - uses: trinsic-id/set-version@v0.1
        id: setversion
        with:
          githubToken: ${{ secrets.API_GITHUB_TOKEN }}
          overrideVersion: ${{ github.event.inputs.packageVersion }}

      - name: Create Package (.deb)
        run: |
          cargo install cargo-deb
          sed -i 's/version = "0.1.0"/version = "${{ steps.setversion.outputs.packageVersion }}"/g' Cargo.toml
          cargo deb
        working-directory: native

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: deb
          path: |
            ./native/target/**/*.deb

      - name: Upload to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./native/target/debian/okapi_${{ steps.setversion.outputs.packageVersion }}_amd64.deb
          asset_name: okapi_${{ steps.setversion.outputs.packageVersion }}_amd64.deb
          tag: ${{ steps.setversion.outputs.releaseVersion }}
          overwrite: false
          body: "Okapi Debian Package"


  nix:
    name: NixOS Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - uses: trinsic-id/set-version@v0.1
        id: setversion
        with:
          githubToken: ${{ secrets.API_GITHUB_TOKEN }}
          overrideVersion: ${{ github.event.inputs.packageVersion }}

      - name: Create Vendored Folders
        run: |
          export CARGO_HOME=`pwd`
          cd native

          sed -i 's/version = "0.1.0"/version = "${{ steps.setversion.outputs.packageVersion }}"/g' Cargo.toml
          mv .cargo/_config.toml .cargo/config.toml

          cargo vendor
          cargo build
          cargo clean

      - name: Create Archive
        run: |
          mv native okapi
          tar -czvf okapi-vendor-${{ steps.setversion.outputs.packageVersion }}.tar.gz okapi

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: nix
          path: |
            ./*.tar.gz

      - name: Upload to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./okapi-vendor-${{ steps.setversion.outputs.packageVersion }}.tar.gz
          asset_name: okapi-vendor-${{ steps.setversion.outputs.packageVersion }}.tar.gz
          tag: ${{ steps.setversion.outputs.releaseVersion }}
          overwrite: false
          body: "okapi bundle for Nix"

  windows:
    name: WIX Package
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - uses: trinsic-id/set-version@v0.1
        id: setversion
        with:
          githubToken: ${{ secrets.API_GITHUB_TOKEN }}
          overrideVersion: ${{ github.event.inputs.packageVersion }}

      - name: Create wix installer
        run: |
          ([Regex]'version = "0.1.0"').Replace((Get-Content -path Cargo.toml -Raw), 'version = "${{ steps.setversion.outputs.packageVersion }}"', 1) | Set-Content -Path Cargo.toml

          cargo install cargo-wix
          cargo wix -b "C:\Program Files (x86)\WiX Toolset v3.11\bin"
        shell: pwsh
        working-directory: native

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: wix
          path: |
            ./native/target/wix/okapi-${{ steps.setversion.outputs.packageVersion }}-x86_64.msi

      - name: Upload to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./native/target/wix/okapi-${{ steps.setversion.outputs.packageVersion }}-x86_64.msi
          asset_name: okapi-${{ steps.setversion.outputs.packageVersion }}-x86_64.msi
          tag: ${{ steps.setversion.outputs.releaseVersion }}
          overwrite: false
          body: "okapi bundle for windows installer"
