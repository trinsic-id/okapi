name: "Rust (release)"

on:
  workflow_dispatch:
    inputs:
      packageVersion:
        description: 'Version to build'
        required: true
        default: 'v1.0.0'
  workflow_run:
    workflows: ["Release Platform Libraries"]
    branches: ["main", "v?.*"]
    types:
      - completed

jobs:
  package_source:
    name: Package Source
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Generate Package Version
        run: |
          $json = Invoke-WebRequest 'https://api.github.com/repos/trinsic-id/okapi/releases/latest' `
            -Headers @{ "Authorization" = "Token $env:API_GITHUB_TOKEN"} | ConvertFrom-Json
          $version = $json.tag_name.Trim("v")
          echo "RELEASE_VERSION=$($json.tag_name)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf-8 -Append
          echo "PACKAGE_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf-8 -Append
        shell: pwsh
        env:
          API_GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}

      - name: Create Archive
        run: |
          cp -r include native
          rm native/build.rs
          sed -i 's/version = "0.1.0"/version = "${{ env.PACKAGE_VERSION }}"/g' native/Cargo.toml
          echo "cargo build --release" > native/build.sh
          chmod 755 native/build.sh
          mv native okapi
          tar -czvf okapi-${{ env.PACKAGE_VERSION }}.tar.gz okapi

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: archive
          path: |
            ./*.tar.gz

      - name: Upload to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./okapi-${{ env.PACKAGE_VERSION }}.tar.gz
          asset_name: okapi-${{ env.PACKAGE_VERSION }}.tar.gz
          tag: ${{ env.RELEASE_VERSION }}
          overwrite: false
          body: "Okapi Library Source"

  make_deb:
    name: Make Debian Package
    runs-on: ubuntu-latest
    # strategy:
    #   matrix:
    #     arch: [amd64]
    #     include:
    #       - arch: x86_64
    #         target: x86_64-unknown-linux-gnu
    #         image: macos-latest
    #       - arch: amd64
    #         target: aarch64-unknown-linux-gnu
    #         image: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Generate Package Version
        run: |
          $json = Invoke-WebRequest 'https://api.github.com/repos/trinsic-id/okapi/releases/latest' `
            -Headers @{ "Authorization" = "Token $env:API_GITHUB_TOKEN"} | ConvertFrom-Json
          $version = $json.tag_name.Trim("v")
          echo "RELEASE_VERSION=$($json.tag_name)" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf-8 -Append
          echo "PACKAGE_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf-8 -Append
        shell: pwsh
        env:
          API_GITHUB_TOKEN: ${{ secrets.API_GITHUB_TOKEN }}

      - name: Create Package (.deb)
        run: |
          cargo install cargo-deb
          sed -i 's/version = "0.1.0"/version = "${{ env.PACKAGE_VERSION }}"/g' Cargo.toml
          cargo deb
        working-directory: native

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: deb
          path: |
            ./native/target/**/*.deb

      - name: Upload to Release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./native/target/debian/okapi_${{ env.PACKAGE_VERSION }}_amd64.deb
          asset_name: okapi_${{ env.PACKAGE_VERSION }}_amd64.deb
          tag: ${{ env.RELEASE_VERSION }}
          overwrite: false
          body: "Okapi Debian Package"