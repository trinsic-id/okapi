# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: okapi/examples/v1/examples.proto
# plugin: python-betterproto
# This file has been @generated
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ....pbmse import v1 as ___pbmse_v1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class BasicMessage(betterproto.Message):
    text: str = betterproto.string_field(1)


class SecureExampleServiceStub(betterproto.ServiceStub):
    async def unary(
        self,
        pbmse_v1_encrypted_message: "___pbmse_v1__.EncryptedMessage",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "___pbmse_v1__.EncryptedMessage":
        return await self._unary_unary(
            "/okapi.examples.v1.SecureExampleService/Unary",
            pbmse_v1_encrypted_message,
            ___pbmse_v1__.EncryptedMessage,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def server_streaming(
        self,
        pbmse_v1_encrypted_message: "___pbmse_v1__.EncryptedMessage",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["___pbmse_v1__.EncryptedMessage"]:
        async for response in self._unary_stream(
            "/okapi.examples.v1.SecureExampleService/ServerStreaming",
            pbmse_v1_encrypted_message,
            ___pbmse_v1__.EncryptedMessage,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class SecureExampleServiceBase(ServiceBase):
    async def unary(
        self, pbmse_v1_encrypted_message: "___pbmse_v1__.EncryptedMessage"
    ) -> "___pbmse_v1__.EncryptedMessage":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def server_streaming(
        self, pbmse_v1_encrypted_message: "___pbmse_v1__.EncryptedMessage"
    ) -> AsyncIterator["___pbmse_v1__.EncryptedMessage"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield ___pbmse_v1__.EncryptedMessage()

    async def __rpc_unary(
        self,
        stream: "grpclib.server.Stream[___pbmse_v1__.EncryptedMessage, ___pbmse_v1__.EncryptedMessage]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.unary(request)
        await stream.send_message(response)

    async def __rpc_server_streaming(
        self,
        stream: "grpclib.server.Stream[___pbmse_v1__.EncryptedMessage, ___pbmse_v1__.EncryptedMessage]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.server_streaming,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/okapi.examples.v1.SecureExampleService/Unary": grpclib.const.Handler(
                self.__rpc_unary,
                grpclib.const.Cardinality.UNARY_UNARY,
                ___pbmse_v1__.EncryptedMessage,
                ___pbmse_v1__.EncryptedMessage,
            ),
            "/okapi.examples.v1.SecureExampleService/ServerStreaming": grpclib.const.Handler(
                self.__rpc_server_streaming,
                grpclib.const.Cardinality.UNARY_STREAM,
                ___pbmse_v1__.EncryptedMessage,
                ___pbmse_v1__.EncryptedMessage,
            ),
        }
