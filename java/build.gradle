buildscript {
    repositories {
        mavenLocal()
        mavenCentral()

        maven { url "https://repo1.maven.org/maven2/" }
    }
}
plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
}
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

// Gradle doesn't allow these at the top of the file - go figure?
def jarDomainId = "id"
def jarGroupId = "trinsic"
def jarArtifactId = "okapi"
def jarVersion = "1.6.1"

publishing {
    publications {
        gpr(MavenPublication) {
            groupId = jarDomainId + "." + jarGroupId
            artifactId = jarArtifactId
            version = jarVersion
            from(components.java)
        }
    }
}

group = jarDomainId + "." + jarGroupId + '.' + jarArtifactId
archivesBaseName = 'trinsic-' + jarArtifactId
version = jarVersion

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.0'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.21.7'
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.12.1'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
}

def classesJar = tasks.register('classesJar', Jar) {
    dependsOn(classes)
    from(sourceSets.main.output) {
        include "**"
    }
    archiveBaseName.set("classes")
    archiveVersion.set("")
}

def serverJar = tasks.register("serverJar", Jar) {
    dependsOn(classes)
    from(sourceSets.main.output) {
        include "**"
    }
    archiveBaseName.set(getArchivesBaseName())
    archiveVersion.set(jarVersion)
    from("../libs") {
        include 'linux*/libokapi.so'
        include 'windows/okapi.dll'
        include 'macos/libokapi.dylib'
    }
}

def androidAar = tasks.register("androidAar", Jar) {
    dependsOn(classes, classesJar)
    archiveBaseName.set(getArchivesBaseName())
    archiveVersion.set(jarVersion)
    archiveExtension.set("aar")
    from("../libs/android") {
        include('**/*.so').into("jni")
    }
    from(classesJar.get().outputs.files.first().getAbsolutePath()).into("/")
    from("R.txt").include()
    from("AndroidManifest.xml").include()
    from("./") {
        include("AndroidValues.xml").into("res/values")
    }
}

jar.dependsOn(classesJar, serverJar, androidAar)
