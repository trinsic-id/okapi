//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: okapi/security/v1/security.proto

package trinsic.okapi.security.v1;

@kotlin.jvm.JvmSynthetic
inline fun blindOberonTokenRequest(block: trinsic.okapi.security.v1.BlindOberonTokenRequestKt.Dsl.() -> Unit): trinsic.okapi.security.v1.Security.BlindOberonTokenRequest =
  trinsic.okapi.security.v1.BlindOberonTokenRequestKt.Dsl._create(trinsic.okapi.security.v1.Security.BlindOberonTokenRequest.newBuilder()).apply { block() }._build()
object BlindOberonTokenRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    @kotlin.jvm.JvmField private val _builder: trinsic.okapi.security.v1.Security.BlindOberonTokenRequest.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: trinsic.okapi.security.v1.Security.BlindOberonTokenRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): trinsic.okapi.security.v1.Security.BlindOberonTokenRequest = _builder.build()

    /**
     * <pre>
     * raw token bytes
     * </pre>
     *
     * <code>bytes token = 1;</code>
     */
    var token: com.google.protobuf.ByteString
      @JvmName("getToken")
      get() = _builder.getToken()
      @JvmName("setToken")
      set(value) {
        _builder.setToken(value)
      }
    /**
     * <pre>
     * raw token bytes
     * </pre>
     *
     * <code>bytes token = 1;</code>
     */
    fun clearToken() {
      _builder.clearToken()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class BlindingProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * blinding to apply to the token
     * </pre>
     *
     * <code>repeated bytes blinding = 2;</code>
     */
     val blinding: com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, BlindingProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getBlindingList()
      )
    /**
     * <pre>
     * blinding to apply to the token
     * </pre>
     *
     * <code>repeated bytes blinding = 2;</code>
     * @param value The blinding to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addBlinding")
    fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, BlindingProxy>.add(value: com.google.protobuf.ByteString) {
      _builder.addBlinding(value)
    }/**
     * <pre>
     * blinding to apply to the token
     * </pre>
     *
     * <code>repeated bytes blinding = 2;</code>
     * @param value The blinding to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignBlinding")
    inline operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, BlindingProxy>.plusAssign(value: com.google.protobuf.ByteString) {
      add(value)
    }/**
     * <pre>
     * blinding to apply to the token
     * </pre>
     *
     * <code>repeated bytes blinding = 2;</code>
     * @param values The blinding to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllBlinding")
    fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, BlindingProxy>.addAll(values: kotlin.collections.Iterable<com.google.protobuf.ByteString>) {
      _builder.addAllBlinding(values)
    }/**
     * <pre>
     * blinding to apply to the token
     * </pre>
     *
     * <code>repeated bytes blinding = 2;</code>
     * @param values The blinding to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllBlinding")
    inline operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, BlindingProxy>.plusAssign(values: kotlin.collections.Iterable<com.google.protobuf.ByteString>) {
      addAll(values)
    }/**
     * <pre>
     * blinding to apply to the token
     * </pre>
     *
     * <code>repeated bytes blinding = 2;</code>
     * @param index The index to set the value at.
     * @param value The blinding to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setBlinding")
    operator fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, BlindingProxy>.set(index: kotlin.Int, value: com.google.protobuf.ByteString) {
      _builder.setBlinding(index, value)
    }/**
     * <pre>
     * blinding to apply to the token
     * </pre>
     *
     * <code>repeated bytes blinding = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearBlinding")
    fun com.google.protobuf.kotlin.DslList<com.google.protobuf.ByteString, BlindingProxy>.clear() {
      _builder.clearBlinding()
    }}
}
@kotlin.jvm.JvmSynthetic
inline fun trinsic.okapi.security.v1.Security.BlindOberonTokenRequest.copy(block: trinsic.okapi.security.v1.BlindOberonTokenRequestKt.Dsl.() -> Unit): trinsic.okapi.security.v1.Security.BlindOberonTokenRequest =
  trinsic.okapi.security.v1.BlindOberonTokenRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()
