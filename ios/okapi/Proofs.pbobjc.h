// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proofs.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class GPBStruct;
@class JsonWebKey;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum LdSuite

typedef GPB_ENUM(LdSuite) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  LdSuite_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  LdSuite_JcsEd25519Signature2020 = 0,
};

GPBEnumDescriptor *LdSuite_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL LdSuite_IsValidValue(int32_t value);

#pragma mark - ProofsRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface ProofsRoot : GPBRootObject
@end

#pragma mark - CreateProofRequest

typedef GPB_ENUM(CreateProofRequest_FieldNumber) {
  CreateProofRequest_FieldNumber_Document = 1,
  CreateProofRequest_FieldNumber_Key = 3,
  CreateProofRequest_FieldNumber_Suite = 4,
};

GPB_FINAL @interface CreateProofRequest : GPBMessage

/**
 * The input JSON document that will be used
 * to create the LD Proof. This document must
 * also contain a "proof" object, with the desired
 * values filled in.
 **/
@property(nonatomic, readwrite, strong, null_resettable) GPBStruct *document;
/** Test to see if @c document has been set. */
@property(nonatomic, readwrite) BOOL hasDocument;

/**
 * The signer of the proof. This field must include
 * the 'kid' in full URI format.
 * Example:
 *  did:example:alice#key-1
 **/
@property(nonatomic, readwrite, strong, null_resettable) JsonWebKey *key;
/** Test to see if @c key has been set. */
@property(nonatomic, readwrite) BOOL hasKey;

/** The LD Suite to use to produce this proof */
@property(nonatomic, readwrite) LdSuite suite;

@end

/**
 * Fetches the raw value of a @c CreateProofRequest's @c suite property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t CreateProofRequest_Suite_RawValue(CreateProofRequest *message);
/**
 * Sets the raw value of an @c CreateProofRequest's @c suite property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetCreateProofRequest_Suite_RawValue(CreateProofRequest *message, int32_t value);

#pragma mark - CreateProofResponse

typedef GPB_ENUM(CreateProofResponse_FieldNumber) {
  CreateProofResponse_FieldNumber_SignedDocument = 1,
};

GPB_FINAL @interface CreateProofResponse : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) GPBStruct *signedDocument;
/** Test to see if @c signedDocument has been set. */
@property(nonatomic, readwrite) BOOL hasSignedDocument;

@end

#pragma mark - VerifyProofRequest

GPB_FINAL @interface VerifyProofRequest : GPBMessage

@end

#pragma mark - VerifyProofResponse

GPB_FINAL @interface VerifyProofResponse : GPBMessage

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
